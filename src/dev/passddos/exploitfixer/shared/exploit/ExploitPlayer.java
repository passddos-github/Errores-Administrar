package dev._2lstudios.exploitfixer.shared.exploit;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.UUID;

import com.google.gson.JsonParser;

import dev._2lstudios.exploitfixer.shared.interfaces.IViolationModule;

public class ExploitPlayer {
    private final Map<IViolationModule, Double> violations;
    private final Collection<Collection<String>> punishmentsDone;
    private final String name;
    private UUID onlineUUID;
    private long lastViolation;
    private int channels;
    private boolean logged;

    public ExploitPlayer(final String name) {
        this.violations = new HashMap<>();
        this.punishmentsDone = new HashSet<>();
        this.name = name;
        this.onlineUUID = null;
        this.logged = false;

        clear();
    }

    public void clear() {
        violations.clear();
        punishmentsDone.clear();
        setLastViolation(0);
        channels = 0;
    }

    public Collection<Collection<String>> getPunishmentsDone() {
        return punishmentsDone;
    }

    public long getLastViolation() {
        return lastViolation;
    }

    public void setLastViolation(final long lastViolation) {
        this.lastViolation = lastViolation;
    }

    public int getChannels() {
        return channels;
    }

    public int addChannels(final int channels) {
        return this.channels += channels;
    }

    public Map<IViolationModule, Double> getViolations() {
        return violations;
    }

    public double getViolations(final IViolationModule module) {
        return violations.getOrDefault(module, 0D);
    }

    public UUID getOnlineUUID() throws MalformedURLException, IOException, IllegalStateException {
        if (onlineUUID == null) {
            final URLConnection connection = new URL("https://api.mojang.com/users/profiles/minecraft/" + name)
                    .openConnection();

            connection.connect();

            try (final InputStream inputStream = connection.getInputStream()) {
                try (final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream))) {
                    final StringBuilder response = new StringBuilder();
                    String inputLine;

                    while ((inputLine = bufferedReader.readLine()) != null) {
                        response.append(inputLine);
                    }

                    onlineUUID = UUID.fromString(new JsonParser().parse(response.toString()).getAsJsonObject().get("id")
                            .getAsString().replaceFirst(
                                    "(\\p{XDigit}{8})(\\p{XDigit}{4})(\\p{XDigit}{4})(\\p{XDigit}{4})(\\p{XDigit}+)",
                                    "$1-$2-$3-$4-$5"));
                }
            }
        }

        return onlineUUID;
    }

    public void setLogged(final boolean logged) {
        this.logged = logged;
    }

    public boolean isLogged() {
        return logged;
    }
}