package dev._2lstudios.exploitfixer.bukkit.utils;

import java.nio.charset.StandardCharsets;
import java.util.Collection;

import org.bukkit.Material;
import org.bukkit.block.BlockState;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.Plugin;

import dev._2lstudios.exploitfixer.bukkit.exploit.BukkitExploitPlayer;
import dev._2lstudios.exploitfixer.bukkit.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bukkit.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bukkit.modules.ItemsFixModule;
import dev._2lstudios.exploitfixer.shared.modules.NotificationsModule;
import dev._2lstudios.exploitfixer.shared.modules.PacketsModule;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;

public class ExploitUtil {
    private final ExploitPlayerManager exploitPlayerManager;
    private final ItemsFixModule itemsFixModule;
    private final NotificationsModule notificationsModule;
    private final PacketsModule packetsModule;
    private final Plugin plugin;

    public ExploitUtil(final ModuleManager moduleManager, final Plugin plugin) {
        this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
        this.itemsFixModule = moduleManager.getItemsFixModule();
        this.notificationsModule = moduleManager.getNotificationsModule();
        this.packetsModule = moduleManager.getPacketsModule();
        this.plugin = plugin;
    }

    private int parseBookLength(final BukkitExploitPlayer exploitPlayer, final HamsterPlayer hamsterPlayer,
            final ItemMeta itemMeta, final String packetName) {
        final Player player = hamsterPlayer.getPlayer();
        final BookMeta bookMeta = (BookMeta) itemMeta;
        final double dataVls = packetsModule.getDataVls();
        final int pageCount = bookMeta.getPageCount(), dataBytesBook = packetsModule.getDataBytesBook();
        int bookTotalBytes = 0;

        if (dataVls > 0 && pageCount > 50) {
            notificationsModule.debug("[" + packetName + "|Book] " + player.getName()
                    + " has sent a packet with a book with too many pages! (" + pageCount + "/" + 50 + ") Added vls: "
                    + dataVls);

            exploitPlayer.addVls(plugin, null, hamsterPlayer, packetsModule, dataVls);
        } else {
            for (final String page : bookMeta.getPages()) {
                final int pageBytes = page.getBytes(StandardCharsets.UTF_8).length;

                bookTotalBytes += pageBytes;

                if (dataVls > 0 && pageBytes > dataBytesBook) {
                    notificationsModule.debug("[" + packetName + "|Book] " + player.getName()
                            + " has sent a packet with a book with too many characters per page! (" + pageBytes + "/"
                            + dataBytesBook + ") Added vls: " + dataVls);

                    exploitPlayer.addVls(plugin, null, hamsterPlayer, packetsModule, dataVls);
                    break;
                }
            }

            return bookTotalBytes;
        }

        return itemMeta.toString().getBytes(StandardCharsets.UTF_8).length;
    }

    public int parseItemLength(final ItemStack itemStack, final BukkitExploitPlayer exploitPlayer,
            final HamsterPlayer hamsterPlayer, final String packetName, final int itemBytesMax) {
        int itemBytesLength = 0;

        if (itemStack != null) {
            final ItemMeta itemMeta = itemStack.getItemMeta();

            try {
                itemBytesLength += itemStack.getData().toString().getBytes(StandardCharsets.UTF_8).length;
            } catch (final Exception exception) {
                notificationsModule
                        .debug("[" + packetName + "] There was an exception when processing itemStack data to String!");
            }

            if (itemStack.hasItemMeta() && itemMeta != null) {
                try {
                    if (itemMeta instanceof BlockStateMeta) {
                        final BlockStateMeta blockStateMeta = (BlockStateMeta) itemMeta;

                        if (blockStateMeta.hasBlockState()) {
                            final BlockState blockState = blockStateMeta.getBlockState();

                            if (blockState instanceof InventoryHolder) {
                                final InventoryHolder inventoryHolder = (InventoryHolder) blockState;

                                for (final ItemStack itemStack1 : inventoryHolder.getInventory().getContents()) {
                                    itemBytesLength += parseItemLength(itemStack1, exploitPlayer, hamsterPlayer,
                                            packetName, itemBytesMax);

                                    if (itemBytesLength > itemBytesMax) {
                                        return itemBytesLength;
                                    }
                                }
                            }
                        }
                    } else {
                        throw new IllegalStateException();
                    }
                } catch (final IllegalStateException e1) {
                    if (itemMeta instanceof BookMeta) {
                        itemBytesLength += parseBookLength(exploitPlayer, hamsterPlayer, itemMeta, packetName);
                    } else {
                        try {
                            itemBytesLength += itemMeta.toString().getBytes(StandardCharsets.UTF_8).length;
                        } catch (final NullPointerException e2) {
                            itemBytesLength += (itemMeta.getClass().getName() + "@"
                                    + Integer.toHexString(itemMeta.hashCode())).getBytes(StandardCharsets.UTF_8).length;
                        }
                    }
                }
            }
        }

        return itemBytesLength;
    }

    public boolean parseSign(final String[] linesString) {
        final int dataBytesSign = packetsModule.getDataBytesSign();

        if (linesString != null) {
            if (linesString.length > 4) {
                return true;
            } else {
                for (final String line : linesString) {
                    if (line.getBytes(StandardCharsets.UTF_8).length > dataBytesSign) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    public String clearIfBlacklisted(final ItemStack itemStack) {
        final Collection<String> blacklist = itemsFixModule.getBlacklist();
        final String materialName = itemStack.getType().toString();

        if (blacklist != null) {
            for (final String blockedMaterial : blacklist) {
                if (materialName.equals(blockedMaterial)) {
                    itemStack.setType(Material.AIR);
                    itemStack.setItemMeta(null);
                    return materialName;
                }
            }
        }

        return null;
    }

    public void cancelExploit(final Cancellable event, final HamsterPlayer hamsterPlayer, final Player player,
            final String reason, final double vls) {
        notificationsModule.debug(reason);
        event.setCancelled(true);

        if (vls > 0) {
            final BukkitExploitPlayer exploitPlayer = exploitPlayerManager.get(player);

            exploitPlayer.addVls(plugin, event, hamsterPlayer, packetsModule, vls);
        }
    }
}
