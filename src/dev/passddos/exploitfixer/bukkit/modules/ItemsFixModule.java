package dev._2lstudios.exploitfixer.bukkit.modules;

import java.util.Collection;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BannerMeta;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.EnchantmentStorageMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.LeatherArmorMeta;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.plugin.Plugin;

import dev._2lstudios.exploitfixer.shared.configuration.IConfiguration;
import dev._2lstudios.exploitfixer.shared.interfaces.IModule;

public class ItemsFixModule implements IModule {
	private final Plugin plugin;
	private boolean enabled;
	private int enchantLimit;
	private int maxStackSize;
	private Collection<String> blacklist;

	public ItemsFixModule(final Plugin plugin) {
		this.plugin = plugin;
	}

	public void reload(final IConfiguration configYml) {
		final String name = getName().toLowerCase();

		this.enabled = configYml.getBoolean(name + ".enabled");
		this.enchantLimit = configYml.getInt(name + ".enchant_limit");
		this.maxStackSize = configYml.getInt(name + ".max_stack_size");
		this.blacklist = configYml.getStringList(name + ".blacklist");
	}

	@Override
	public boolean isEnabled() {
		return enabled;
	}

	@Override
	public String getName() {
		return "ItemsFix";
	}

	public int getEnchantLimit() {
		return enchantLimit;
	}

	public int getMaxStackSize() {
		return maxStackSize;
	}

	public Collection<String> getBlacklist() {
		return blacklist;
	}

	public ItemStack fixItem(final ItemStack itemStack) {
		final Material material = Material.getMaterial(itemStack.getType().name());
		final ItemMeta oldItemMeta = itemStack.getItemMeta();
		final ItemMeta newItemMeta = plugin.getServer().getItemFactory().getItemMeta(material);
		final short durability = itemStack.getDurability();

		if (itemStack.hasItemMeta()) {
			final String displayName = oldItemMeta.getDisplayName();
			final List<String> lore = oldItemMeta.getLore();

			if (enchantLimit > -1) {
				if (oldItemMeta instanceof EnchantmentStorageMeta) {
					final EnchantmentStorageMeta enchantmentStorageMeta = (EnchantmentStorageMeta) oldItemMeta;
					final EnchantmentStorageMeta newEnchantmentStorageMeta = (EnchantmentStorageMeta) newItemMeta;

					enchantmentStorageMeta.getStoredEnchants().forEach((enchantment, level) -> {
						if (level <= enchantLimit && level > -1) {
							newEnchantmentStorageMeta.addStoredEnchant(enchantment, level, true);
						}
					});
				} else {
					itemStack.getEnchantments().forEach((enchantment, level) -> {
						if (level <= enchantLimit && level > -1) {
							newItemMeta.addEnchant(enchantment, level, true);
						}
					});
				}
			}

			if (newItemMeta instanceof BookMeta) {
				final BookMeta oldBookMeta = (BookMeta) oldItemMeta;
				final BookMeta newBookMeta = (BookMeta) newItemMeta;

				newBookMeta.setTitle(oldBookMeta.getTitle());
				newBookMeta.setAuthor(oldBookMeta.getAuthor());
				newBookMeta.setPages(oldBookMeta.getPages());
			} else if (newItemMeta instanceof SkullMeta) {
				final SkullMeta oldSkullMeta = (SkullMeta) oldItemMeta;
				final SkullMeta newSkullMeta = (SkullMeta) newItemMeta;

				newSkullMeta.setOwner(oldSkullMeta.getOwner());
			} else if (newItemMeta instanceof BannerMeta) {
				final BannerMeta oldBannerMeta = (BannerMeta) oldItemMeta;
				final BannerMeta newBannerMeta = (BannerMeta) newItemMeta;

				newBannerMeta.setBaseColor(oldBannerMeta.getBaseColor());
			} else if (newItemMeta instanceof LeatherArmorMeta) {
				final LeatherArmorMeta oldLeatherArmorMeta = (LeatherArmorMeta) oldItemMeta;
				final LeatherArmorMeta newLeatherArmorMeta = (LeatherArmorMeta) newItemMeta;

				newLeatherArmorMeta.setColor(oldLeatherArmorMeta.getColor());
			}

			if (displayName != null && displayName.getBytes().length < 128) {
				newItemMeta.setDisplayName(displayName);
			}

			if (lore != null && lore.toString().getBytes().length < 1024) {
				newItemMeta.setLore(lore);
			}
		}

		if (maxStackSize > 0 && itemStack.getAmount() > maxStackSize) {
			itemStack.setAmount(maxStackSize);
		}

		itemStack.setType(material);
		itemStack.setItemMeta(newItemMeta);
		itemStack.setDurability(durability);

		return itemStack;
	}
}
