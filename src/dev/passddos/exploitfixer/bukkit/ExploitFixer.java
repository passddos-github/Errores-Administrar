package dev._2lstudios.exploitfixer.bukkit;

import java.util.logging.Logger;

import org.bukkit.Server;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitScheduler;

import dev._2lstudios.exploitfixer.bukkit.commands.ExploitFixerCommand;
import dev._2lstudios.exploitfixer.bukkit.listener.ListenerInitializer;
import dev._2lstudios.exploitfixer.bukkit.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bukkit.tasks.ExploitFixerRepeatingTask;
import dev._2lstudios.exploitfixer.bukkit.utils.BukkitConfigurationUtil;
import dev._2lstudios.exploitfixer.bukkit.utils.VersionUtil;
import dev._2lstudios.exploitfixer.shared.configuration.IConfiguration;

public class ExploitFixer extends JavaPlugin {
	private static ExploitFixer instance;
	private BukkitConfigurationUtil configurationUtil;
	private ModuleManager moduleManager;
	private ListenerInitializer listenerInitializer;

	public static synchronized ExploitFixer getInstance() {
		return instance;
	}

	public static synchronized void setInstance(final ExploitFixer exploitFixer) {
		ExploitFixer.instance = exploitFixer;
	}

	@Override
	public void onEnable() {
		setInstance(this);
		final Server server = this.getServer();
		final BukkitScheduler scheduler = server.getScheduler();

		if (!checkHamsterAPI()) {
			throw new NullPointerException(
					"ExploitFixer requires HamsterAPI to listen to packets and block exploits! Download: https://www.spigotmc.org/resources/78831/");
		}

		configurationUtil = new BukkitConfigurationUtil(this);

		createConfigurations();

		final IConfiguration configYml = configurationUtil.get("%datafolder%/config.yml");

		VersionUtil.initialize(server);

		moduleManager = new ModuleManager(configurationUtil, this);
		moduleManager.reload(configYml);
		listenerInitializer = new ListenerInitializer(this, moduleManager);

		register();

		scheduler.runTaskTimerAsynchronously(this, new ExploitFixerRepeatingTask(
				moduleManager.getExploitPlayerManager(), moduleManager.getNotificationsModule()), 20L, 20L);
	}

	@Override
	public void onDisable() {
		final Server server = this.getServer();
		final BukkitScheduler scheduler = server.getScheduler();

		scheduler.cancelTasks(this);

		this.listenerInitializer.unregister();
	}

	public void reload() {
		final Server server = getServer();
		final BukkitScheduler scheduler = server.getScheduler();

		scheduler.cancelTasks(this);
		server.getMessenger().unregisterIncomingPluginChannel(this);

		createConfigurations();

		final IConfiguration configYml = configurationUtil.get("%datafolder%/config.yml");

		moduleManager.reload(configYml);

		register();
	}

	private boolean checkHamsterAPI() {
		final Server server = this.getServer();
		final PluginManager pluginManager = server.getPluginManager();

		return pluginManager.isPluginEnabled("HamsterAPI");
	}

	private void createConfigurations() {
		configurationUtil.create("%datafolder%/config.yml", "config.yml");
	}

	private void register() {
		final Logger logger = this.getLogger();

		getCommand("exploitfixer").setExecutor(new ExploitFixerCommand(this, moduleManager));

		logger.info("Successfully registered commands!");

		if (this.listenerInitializer.isRegistered()) {
			this.listenerInitializer.unregister();
		}

		this.listenerInitializer.register();

		logger.info("Successfully registered listeners!");
		logger.info("Successfully hooked with HamsterAPI!");
	}
}