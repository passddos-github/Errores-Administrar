package dev._2lstudios.exploitfixer.bungee;

import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

import dev._2lstudios.exploitfixer.bungee.commands.ExploitFixerCommand;
import dev._2lstudios.exploitfixer.bungee.listeners.ListenerInitializer;
import dev._2lstudios.exploitfixer.bungee.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bungee.tasks.ExploitFixerRepeatingTask;
import dev._2lstudios.exploitfixer.bungee.utils.BungeeConfigurationUtil;
import dev._2lstudios.exploitfixer.shared.configuration.IConfiguration;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.api.plugin.PluginManager;
import net.md_5.bungee.api.scheduler.TaskScheduler;

public class ExploitFixer extends Plugin {
	private static ExploitFixer instance;
	private BungeeConfigurationUtil configurationUtil;
	private ModuleManager moduleManager;
	private ListenerInitializer listenerInitializer;

	public static synchronized ExploitFixer getInstance() {
		return instance;
	}

	public static synchronized void setInstance(final ExploitFixer exploitFixer) {
		ExploitFixer.instance = exploitFixer;
	}

	@Override
	public void onEnable() {
		setInstance(this);

		final TaskScheduler scheduler = getProxy().getScheduler();

		configurationUtil = new BungeeConfigurationUtil(this);

		createConfigurations();

		final IConfiguration configYml = configurationUtil.get("%datafolder%/config.yml");

		moduleManager = new ModuleManager(configurationUtil, this);
		moduleManager.reload(configYml);
		listenerInitializer = new ListenerInitializer(this, moduleManager);

		register();

		scheduler.schedule(this, new ExploitFixerRepeatingTask(
				moduleManager.getExploitPlayerManager(), moduleManager.getNotificationsModule()), 1, 1, TimeUnit.SECONDS);
	}

	@Override
	public void onDisable() {
		final TaskScheduler scheduler = getProxy().getScheduler();

		scheduler.cancel(this);
	}

	public void reload() {
		createConfigurations();

		final IConfiguration configYml = configurationUtil.get("%datafolder%/config.yml");

		moduleManager.reload(configYml);

		register();
	}

	private void createConfigurations() {
		configurationUtil.create("%datafolder%/config.yml", "config.yml");
	}

	private void register() {
		final Logger logger = getLogger();
		final PluginManager pluginManager = getProxy().getPluginManager();

		pluginManager.unregisterCommands(this);
		pluginManager.registerCommand(this,
				new ExploitFixerCommand("exploitfixer", new String[] { "ef" }, this, moduleManager));

		logger.info("Successfully registered commands!");

		if (this.listenerInitializer.isRegistered()) {
			this.listenerInitializer.unregister();
		}

		this.listenerInitializer.register();

		logger.info("Successfully registered listeners!");
	}
}