package dev._2lstudios.exploitfixer.bungee.listeners;

import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.event.PostLoginEvent;
import net.md_5.bungee.api.plugin.Listener;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.api.scheduler.TaskScheduler;
import net.md_5.bungee.event.EventHandler;
import net.md_5.bungee.event.EventPriority;
import dev._2lstudios.exploitfixer.shared.modules.ConnectionModule;
import dev._2lstudios.exploitfixer.bungee.exploit.BungeeExploitPlayer;
import dev._2lstudios.exploitfixer.bungee.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bungee.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bungee.utils.VersionUtil;
import dev._2lstudios.exploitfixer.shared.modules.MessagesModule;
import dev._2lstudios.exploitfixer.shared.modules.NotificationsModule;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.UUID;

public class PostLoginListener implements Listener {
	private final Plugin plugin;
	private final ConnectionModule connectionModule;
	private final NotificationsModule notificationsModule;
	private final MessagesModule messagesModule;
	private final ExploitPlayerManager exploitPlayerManager;

	PostLoginListener(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.connectionModule = moduleManager.getConnectionModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.messagesModule = moduleManager.getMessagesModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
	}

	@EventHandler(priority = EventPriority.LOWEST)
	public void onPostLogin(final PostLoginEvent event) {
		final ProxiedPlayer player = event.getPlayer();
		final String playerName = player.getName();
		final InetSocketAddress address = player.getAddress();
		final String locale = VersionUtil.getLocale(player);

		if (connectionModule.isNullAddressEnabled() && (address == null || address.isUnresolved())) {
			player.disconnect(TextComponent.fromLegacyText(messagesModule.getKickMessage("nulladdress", locale)));
		} else {
			final UUID originalUUID = player.getUniqueId();
			final BungeeExploitPlayer exploitPlayer = exploitPlayerManager.get(player);

			if (connectionModule.isUUIDSpoofEnabled()) {
				final TaskScheduler scheduler = plugin.getProxy().getScheduler();

				scheduler.runAsync(plugin, () -> {
					final UUID offlineUUID = UUID.nameUUIDFromBytes(("OfflinePlayer:" + playerName).getBytes());

					if (!originalUUID.equals(offlineUUID)) {
						try {
							final UUID onlineUUID = exploitPlayer.getOnlineUUID();

							if (onlineUUID == null || !originalUUID.equals(onlineUUID)) {
								player.disconnect(TextComponent
										.fromLegacyText(messagesModule.getKickMessage("uuidspoof", locale)));
							}
						} catch (IllegalStateException | IOException e) {
							player.disconnect(TextComponent.fromLegacyText(messagesModule.getMojangDown(locale)));
						}
					}

					exploitPlayer.setLogged(true);
				});
			} else
				exploitPlayer.setLogged(true);
		}

		if (player.hasPermission("exploitfixer.notifications")) {
			notificationsModule.setNotifications(playerName, true);
		}
	}
}