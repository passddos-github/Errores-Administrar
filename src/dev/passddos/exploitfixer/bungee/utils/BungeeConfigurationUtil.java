package dev._2lstudios.exploitfixer.bungee.utils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.logging.Logger;

import dev._2lstudios.exploitfixer.bungee.configuration.BungeeConfiguration;
import dev._2lstudios.exploitfixer.shared.configuration.IConfiguration;
import dev._2lstudios.exploitfixer.shared.interfaces.IConfigurationUtil;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.api.scheduler.TaskScheduler;
import net.md_5.bungee.config.Configuration;
import net.md_5.bungee.config.ConfigurationProvider;
import net.md_5.bungee.config.YamlConfiguration;

public class BungeeConfigurationUtil implements IConfigurationUtil {
	private static final String DATA_FOLDER_PLACEHOLDER = "%datafolder%";
	private final String dataFolderPath;
	private final String prefix;
	private final Logger logger;
	private final Plugin plugin;
	private final TaskScheduler scheduler;
	private final ClassLoader classLoader;

	public BungeeConfigurationUtil(final Plugin plugin) {
		this.plugin = plugin;
		this.scheduler = plugin.getProxy().getScheduler();
		this.logger = plugin.getLogger();
		this.classLoader = plugin.getClass().getClassLoader();
		this.dataFolderPath = plugin.getDataFolder().toString();
		this.prefix = "[" + plugin.getDescription().getName() + "]";
	}

	private void createParentFolder(final File file) {
		final File parentFile = file.getParentFile();

		if (parentFile != null) {
			parentFile.mkdirs();
		}
	}

	public IConfiguration get(final String path) {
		final File file = new File(path.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath));

		if (file.exists()) {
			try {
				return new BungeeConfiguration(ConfigurationProvider.getProvider(YamlConfiguration.class).load(file));
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		} else {
			return null;
		}
	}

	public void create(final String rawPath, final String resourcePath) {
		final String path = rawPath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

		try {
			final File configFile = new File(path);

			if (!configFile.exists()) {
				final InputStream inputStream = classLoader.getResourceAsStream(resourcePath);

				createParentFolder(configFile);

				if (inputStream != null) {
					Files.copy(inputStream, configFile.toPath());
				} else {
					configFile.createNewFile();
				}

				logger.info(prefix + " File '" + path + "' has been created!");
			}
		} catch (final IOException e) {
			logger.info(prefix + " Unable to create '" + path + "'!");
		}
	}

	public void save(final IConfiguration configuration, final String rawPath) {
		final String path = rawPath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

		scheduler.runAsync(plugin, () -> {
			try {
				ConfigurationProvider.getProvider(YamlConfiguration.class)
						.save((Configuration) configuration.getObject(), new File(path));

				logger.info(prefix + " File '" + path + "' has been saved!");
			} catch (final IOException e) {
				logger.info(prefix + " Unable to save '" + path + "'!");
			}
		});
	}

	public void delete(final String rawPath) {
		final String path = rawPath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

		scheduler.runAsync(plugin, () -> {
			try {
				Files.delete(new File(path).toPath());

				logger.info(prefix + " File '" + path + "' has been removed!");
			} catch (IOException e) {
				logger.info(prefix + " Unable to remove '" + path + "'!");
			}
		});
	}
}