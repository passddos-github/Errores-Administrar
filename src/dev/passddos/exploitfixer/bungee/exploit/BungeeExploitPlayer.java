package dev._2lstudios.exploitfixer.bungee.exploit;

import java.util.Collection;
import java.util.HashSet;
import java.util.Map;

import dev._2lstudios.exploitfixer.bungee.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bungee.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bungee.utils.VersionUtil;
import dev._2lstudios.exploitfixer.shared.exploit.ExploitPlayer;
import dev._2lstudios.exploitfixer.shared.exploit.Violations;
import dev._2lstudios.exploitfixer.shared.interfaces.IModule;
import dev._2lstudios.exploitfixer.shared.interfaces.IViolationModule;
import dev._2lstudios.exploitfixer.shared.modules.MessagesModule;
import dev._2lstudios.exploitfixer.shared.modules.NotificationsModule;
import net.md_5.bungee.api.CommandSender;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.plugin.Cancellable;

public class BungeeExploitPlayer extends ExploitPlayer {
	private final ProxyServer server;
	private final ExploitPlayerManager exploitPlayerManager;
	private final MessagesModule messagesModule;
	private final NotificationsModule notificationsModule;

	public BungeeExploitPlayer(final ProxyServer server, final String name, final ModuleManager moduleManager) {
		super(name);
		this.server = server;
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.messagesModule = moduleManager.getMessagesModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
	}

	public void addVls(final Object event, final ProxiedPlayer player, final IViolationModule module,
			final double amount) {
		if (player.isConnected()) {
			final Violations violations = (Violations) module.getViolations();

			if (violations != null) {
				final Map<IViolationModule, Double> violationsMap = getViolations();
				final long currentTime = System.currentTimeMillis();
				final long lastViolation = getLastViolation();

				if (currentTime - lastViolation >= 1000) {
					setLastViolation(currentTime);

					for (final IViolationModule violationModule : new HashSet<>(violationsMap.keySet())) {
						final double vls = violationsMap.get(violationModule) - violationModule.getReduceVls();

						if (vls <= 0) {
							violationsMap.remove(violationModule);
						} else {
							violationsMap.put(violationModule, vls);
						}
					}
				}

				final double newVls = getViolations(module) + amount;

				violationsMap.put(module, newVls);

				if (event instanceof Cancellable && module.getCancelVls() <= newVls) {
					((Cancellable) event).setCancelled(true);
				}

				for (final int threshold : violations.getViolations()) {
					if (threshold <= newVls) {
						final Collection<String> commands = violations.getCommands(threshold);

						punish(module, player, commands, (int) newVls);
					}
				}
			}
		} else if (event instanceof Cancellable) {
			((Cancellable) event).setCancelled(true);
		}
	}

	public void punish(final IModule module, final ProxiedPlayer player, final Collection<String> punishments,
			final int newVls) {
		final Collection<Collection<String>> punishmentsDone = getPunishmentsDone();

		if (!punishments.isEmpty() && !punishmentsDone.contains(punishments)) {
			final CommandSender consoleSender = server.getConsole();
			final String playerName = player.getName();

			for (final String punishment : punishments) {
				if (punishment.equals("kick")) {
					final String locale = VersionUtil.getLocale(player);
					final String kickMessage = messagesModule.getKickMessage(module, locale);

					player.disconnect(TextComponent.fromLegacyText(kickMessage));
				} else if (punishment.equals("notification")) {
					final String moduleName = module.getName();

					notificationsModule.sendNotification(moduleName, player, (int) newVls);
				} else {
					server.getPluginManager().dispatchCommand(consoleSender,
							punishment.replace("%player%", playerName));
				}
			}

			punishmentsDone.add(punishments);
			exploitPlayerManager.addPunishment();
		}
	}
}
